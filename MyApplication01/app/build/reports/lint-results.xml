<?xml version="1.0" encoding="UTF-8"?>
<issues format="5" by="lint 3.6.2">

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of junit:junit than 4.12 is available: 4.13"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    testImplementation &apos;junit:junit:4.12&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\Development\atelierul_digital\MyApplication01\app\build.gradle"
            line="31"
            column="5"/>
    </issue>

    <issue
        id="AllowBackup"
        severity="Warning"
        message="On SDK version 23 and up, your app data will be automatically backed up and restored on app install. Consider adding the attribute `android:fullBackupContent` to specify an `@xml` resource which configures which files to backup. More info: https://developer.android.com/training/backup/autosyncapi.html"
        category="Security"
        priority="3"
        summary="AllowBackup/FullBackupContent Problems"
        explanation="The `allowBackup` attribute determines if an application&apos;s data can be backed up and restored. It is documented at http://developer.android.com/reference/android/R.attr.html#allowBackup&#xA;&#xA;By default, this flag is set to `true` which means application data can be backed up and restored by the OS. Setting `allowBackup=&quot;false&quot;` opts the application out of being backed up and so users can&apos;t restore data related to it when they go through the device setup wizard.&#xA;&#xA;Allowing backups may have security consequences for an application. Currently `adb backup` allows users who have enabled USB debugging to copy application data off of the device. Once backed up, all application data can be read by the user. `adb restore` allows creation of application data from a source specified by the user. Following a restore, applications should not assume that the data, file permissions, and directory permissions were created by the application itself.&#xA;&#xA;To fix this warning, decide whether your application should support backup, and explicitly set `android:allowBackup=(true|false)&quot;`.&#xA;&#xA;If not set to false, and if targeting API 23 or later, lint will also warn that you should set `android:fullBackupContent` to configure auto backup."
        url="https://developer.android.com/training/backup/autosyncapi.html"
        urls="https://developer.android.com/training/backup/autosyncapi.html,http://developer.android.com/reference/android/R.attr.html#allowBackup"
        errorLine1="    &lt;application"
        errorLine2="     ~~~~~~~~~~~">
        <location
            file="D:\Development\atelierul_digital\MyApplication01\app\src\main\AndroidManifest.xml"
            line="5"
            column="6"/>
    </issue>

    <issue
        id="IconXmlAndPng"
        severity="Warning"
        message="The following images appear both as density independent `.xml` files and as bitmap files: src\\main\\res\\drawable-anydpi\\test.xml, src\\main\\res\\drawable-hdpi\\test.png"
        category="Usability:Icons"
        priority="7"
        summary="Icon is specified both as `.xml` file and as a bitmap"
        explanation="If a drawable resource appears as an `.xml` file in the `drawable/` folder, it&apos;s usually not intentional for it to also appear as a bitmap using the same name; generally you expect the drawable XML file to define states and each state has a corresponding drawable bitmap.">
        <location
            file="D:\Development\atelierul_digital\MyApplication01\app\src\main\res\drawable-xxhdpi\test.png"/>
        <location
            file="D:\Development\atelierul_digital\MyApplication01\app\src\main\res\drawable-xhdpi\test.png"/>
        <location
            file="D:\Development\atelierul_digital\MyApplication01\app\src\main\res\drawable-mdpi\test.png"/>
        <location
            file="D:\Development\atelierul_digital\MyApplication01\app\src\main\res\drawable-hdpi\test.png"/>
        <location
            file="D:\Development\atelierul_digital\MyApplication01\app\src\main\res\drawable-anydpi\test.xml"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="         ~~~~~~~~~">
        <location
            file="D:\Development\atelierul_digital\MyApplication01\app\src\main\res\layout\activity_main.xml"
            line="62"
            column="10"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Happy Birthday to my wife!&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Happy Birthday to my wife!&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\Development\atelierul_digital\MyApplication01\app\src\main\res\layout\activity_main.xml"
            line="159"
            column="9"/>
    </issue>

</issues>
